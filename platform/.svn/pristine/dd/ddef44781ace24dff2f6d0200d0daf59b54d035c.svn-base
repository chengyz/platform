package com.weixinpay;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.SortedMap;
import java.util.TreeMap;

import com.sctgz.util.ReadProperties;
import com.weixinpay.entry.WxPayDto;

public class WeixinpayUtil {
		/**
		 * @param args
		 */
		public static void main(String[] args) {
			
		    
		    //扫码支付
		    WxPayDto tpWxPay1 = new WxPayDto();
		    tpWxPay1.setBody("商品信息");
		    tpWxPay1.setOrderId(getNonceStr());
		    tpWxPay1.setSpbillCreateIp("127.0.0.1");
		    tpWxPay1.setTotalFee("0.01");
			System.out.println("hello:"+getCodeurl(tpWxPay1).toString());
			
			
		}
		
		/**
		 * 获取微信扫码支付二维码连接
		 */
		public static String getCodeurl(WxPayDto tpWxPayDto){
			
			// 1 参数
			// 订单号
			String orderId = tpWxPayDto.getOrderId();
			// 附加数据 原样返回
			String attach = "";
			// 总金额以分为单位，不带小数点
			String totalFee = getMoney(tpWxPayDto.getTotalFee());
			
			// 订单生成的机器 IP
			String spbill_create_ip = tpWxPayDto.getSpbillCreateIp();
			// 这里notify_url是 支付完成后微信发给该链接信息，可以判断会员是否支付成功，改变订单状态等。
			String notify_url = ReadProperties.getValue("weixinpcnotifyurl");
			String trade_type = "NATIVE";

			// 商户号
			String mch_id = ReadProperties.getValue("partner");
			// 随机字符串
			String nonce_str = getNonceStr();

			// 商品描述根据情况修改
			String body = tpWxPayDto.getBody();

			// 商户订单号
			String out_trade_no = orderId;

			SortedMap<String, String> packageParams = new TreeMap<String, String>();
			packageParams.put("appid", ReadProperties.getValue("appid"));
			packageParams.put("mch_id", mch_id);
			packageParams.put("nonce_str", nonce_str);
			packageParams.put("body", body);
			packageParams.put("attach", attach);
			packageParams.put("out_trade_no", out_trade_no);

			// 这里写的金额为1 分到时修改
			packageParams.put("total_fee", totalFee);
			packageParams.put("spbill_create_ip", spbill_create_ip);
			packageParams.put("notify_url", notify_url);

			packageParams.put("trade_type", trade_type);

			RequestHandler reqHandler = new RequestHandler(null, null);
			reqHandler.init(ReadProperties.getValue("appid"), ReadProperties.getValue("appsecret"), ReadProperties.getValue("partnerkey"));

			String sign = reqHandler.createSign(packageParams);
			String xml = "<xml>" + "<appid>" + ReadProperties.getValue("appid") + "</appid>" + "<mch_id>"
					+ mch_id + "</mch_id>" + "<nonce_str>" + nonce_str
					+ "</nonce_str>" + "<sign>" + sign + "</sign>"
					+ "<body><![CDATA[" + body + "]]></body>" 
					+ "<out_trade_no>" + out_trade_no
					+ "</out_trade_no>" + "<attach>" + attach + "</attach>"
					+ "<total_fee>" + totalFee + "</total_fee>"
					+ "<spbill_create_ip>" + spbill_create_ip
					+ "</spbill_create_ip>" + "<notify_url>" + notify_url
					+ "</notify_url>" + "<trade_type>" + trade_type
					+ "</trade_type>" + "</xml>";
			String code_url = "";
			String createOrderURL = "https://api.mch.weixin.qq.com/pay/unifiedorder";
			
			try {
				
			} catch (Exception e) {
				// TODO: handle exception
			}
			code_url = new GetWxOrderno().getCodeUrl(createOrderURL, xml);
			System.out.println("code_url----------------："+code_url);
			
			return code_url;
		}
		
		

		/**
		 * 获取随机字符串
		 * @return
		 */
		public static String getNonceStr() {
			// 随机数
			String currTime = TenpayUtil.getCurrTime();
			// 8位日期
			String strTime = currTime.substring(8, currTime.length());
			// 四位随机数
			String strRandom = TenpayUtil.buildRandom(4) + "";
			// 10位序列号,可以自行调整。
			return strTime + strRandom;
		}

		/**
		 * 元转换成分
		 * @param money
		 * @return
		 */
		public static String getMoney(String amount) {
			if(amount==null){
				return "";
			}
			// 金额转化为分为单位
			String currency =  amount.replaceAll("\\$|\\￥|\\,", "");  //处理包含, ￥ 或者$的金额  
	        int index = currency.indexOf(".");  
	        int length = currency.length();  
	        Long amLong = 0l;  
	        if(index == -1){  
	            amLong = Long.valueOf(currency+"00");  
	        }else if(length - index >= 3){  
	            amLong = Long.valueOf((currency.substring(0, index+3)).replace(".", ""));  
	        }else if(length - index == 2){  
	            amLong = Long.valueOf((currency.substring(0, index+2)).replace(".", "")+0);  
	        }else{  
	            amLong = Long.valueOf((currency.substring(0, index+1)).replace(".", "")+"00");  
	        }  
	        return amLong.toString(); 
		}
		
		//谷歌生成二维码
		public static String QRfromGoogle(String chl) throws Exception {
			int widhtHeight = 300;
			String EC_level = "L";
			int margin = 0;
			chl = UrlEncode(chl);
			String QRfromGoogle = "http://chart.apis.google.com/chart?chs=" + widhtHeight + "x" + widhtHeight
					+ "&cht=qr&chld=" + EC_level + "|" + margin + "&chl=" + chl;

			return QRfromGoogle;
		}
		
		// 特殊字符处理
		public static String UrlEncode(String src)  throws UnsupportedEncodingException {
			return URLEncoder.encode(src, "UTF-8").replace("+", "%20");
		}
}
