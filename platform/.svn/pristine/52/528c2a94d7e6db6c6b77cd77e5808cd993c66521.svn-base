/**
 * 
 */
package com.sctgz.HkdApp.action;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import spark.Request;
import spark.Response;
import spark.Route;
import spark.Spark;
import spark.annotation.Auto;
import spark.servlet.ISparkApplication;

import com.mysql.jdbc.StringUtils;
import com.sctgz.HkdApp.manage.AppMng;
import com.sctgz.platform.manage.AppInfoMng;
import com.sctgz.platform.manage.VipMng;
import com.sctgz.util.CacheUtil;
import com.sctgz.util.ComputePbblt;
import com.sctgz.util.DateTimeUtil;
import com.sctgz.util.JsonUtil;
import com.sctgz.util.ReadProperties;
import com.sctgz.util.SimpleTokenUtil;

/**
 * 说明:商家信息采集app
 * @author zhangmeng
 * 添加时间 :2017年2月22日 上午10:04:12
 *
 */
public class AppAction implements ISparkApplication {
	@Auto(name=AppMng.class)
	private AppMng appMng;
	@Auto(name=VipMng.class)
	private VipMng vipMng;
	@Auto(name=AppInfoMng.class)
	private AppInfoMng appInfoMng;
	@Override
	public void run() {
		Spark.post(new Route("/hkdapp/appLogin/check",false,"jdbcread") {			
			@Override
			public Object handle(Request request, Response response) throws Exception {
				return appMng.getSMSCode(request.raw(), response.raw());
			}
		});
		
		/**
		 * 获取验证码
		 */
		Spark.post(new Route("/hkdapp/vip/getSMSCode",false,"jdbcread") {			
			@Override
			public Object handle(Request request, Response response) throws Exception {
				return appMng.getSMSCode(request.raw(), response.raw());
			}
		});
		
		
		Spark.post(new Route("/hkdapp/check/update", true, "jdbcread") {
			@Override
			public Object handle(Request request, Response response) throws Exception {
				Map<String,Object> result = new HashMap<String, Object>();
				String appname = request.queryParams("appname");
				String appid = request.queryParams("appid");
				String appVersion = request.queryParams("version");
				String imei = request.queryParams("imei");
				String platform = request.queryParams("platform");//平台类型，ios平台或android平台。
				
				//获得app目录
				String realScrPath = request.raw().getSession().getServletContext().getRealPath("/web/app/"+appname+"/"+platform);
				File dir = new File(realScrPath);
				//dir.getAbsolutePath())
				if (!dir.exists()) {
					try {
						dir.mkdirs();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				//获取最新版本号和文件名
				String lastVersion = ReadProperties.getValue(appname+"_"+platform+"Version");
				String lastFileName = ReadProperties.getValue(appname+"_"+platform+"FileName");
				String iosReviewVersion = ReadProperties.getValue(appname+"_iosReviewVersion");//ios正在审核的app版本
				String iosPassReview = ReadProperties.getValue(appname+"_iosPassReview");//版本审核的状态
				//ios在审核期间，去除付费模块,审核通过后，显示付费模块；1、审核通过；2、未通过
				//只针对正在审核的版本加以限制
				if(appVersion.equals(iosReviewVersion)){
					result.put("iosPassReview", iosPassReview);
				}else{
					result.put("iosPassReview", "1");
				}
		    	//可用于同步app时间
		    	result.put("checkTime", DateTimeUtil.formatDateTime(new Date(), "yyyy-MM-dd HH:mm:ss"));
				
			    //判断当前app是否是最新版本，返回下载路径
			    if(!StringUtils.isNullOrEmpty(lastVersion) && !StringUtils.isNullOrEmpty(appVersion)){
			    	if(ComputePbblt.compareVersion(lastVersion, appVersion) > 0){
			    		String note = ComputePbblt.getAppVersionLog(lastVersion, realScrPath+File.separator+"log.txt");
			    		String noteFormat = "<p style='text-align:left;font-size:.8rem'>"+note+"</p>";
			    		result.put("status", true);
			    		result.put("note", "有新版本，是否进行更新？\n"+noteFormat);
			    		result.put("title", "更新提示");
			    		//andorid直接提供下载地址
			    		if(platform.equals("android")){
			    			String ip = request.raw().getScheme() + "://"
			    					+ request.raw().getServerName() + ":" + request.raw().getServerPort()
			    					+ request.raw().getContextPath() + "/";
			    			result.put("url", ip + "web/app/"+appname+"/"+platform + "/"+lastFileName);
			    		}else{//ios提供该应用在appstore上的地址。如：itms-apps://itunes.apple.com/cn/app/...
			    			result.put("url", lastFileName);
			    		}
			    		return JsonUtil.ObjToJson(result);
			    	}
			    }
			    
		    	result.put("status", false);
		    	result.put("title", "更新提示");
		    	result.put("note", "已经是最新的版本了");
				return JsonUtil.ObjToJson(result);
			}

		});
		/**
		 * 将app信息加入后台管理后的APP更新
		 */
		Spark.post(new Route("/hkdapp/check/updateApp", true, "jdbcread") {
			@Override
			public Object handle(Request request, Response response) throws Exception {
				Map<String,Object> result = new HashMap<String, Object>();
				String appname = request.queryParams("appname");
				String appid = request.queryParams("appid");
				String appVersion = request.queryParams("version");
				String imei = request.queryParams("imei");
				String platform = request.queryParams("platform");//平台类型，ios平台或android平台。
				System.out.println(appname);
				System.out.println(platform);
				List<Map>  appList = new ArrayList<Map>();
				if("paotui".equals(appname)){
					appList = (List<Map>)CacheUtil.getInstance().getBaseCache().get("paotuisCache");
					
					if(appList == null || appList.size() == 1){
						//查询APP信息，并将其存入缓存
						if(appInfoMng.findAppInfo("jdbcread", false,appname,platform)){
							appList = (List<Map>)CacheUtil.getInstance().getBaseCache().get("paotuisCache");
						}else{
							result.put("note", "已经是最新的版本了");
						}
					}
				}
				if("ppinfo".equals(appname)){
					appList = (List<Map>)CacheUtil.getInstance().getBaseCache().get("ppinfosCache");
					if(appList == null || appList.size() == 1){
						//查询APP信息，并将其存入缓存
						if(appInfoMng.findAppInfo("jdbcread", false, appname,platform)){
							appList = (List<Map>)CacheUtil.getInstance().getBaseCache().get("ppinfosCache");
						}else{
							result.put("note", "已经是最新的版本了");
						}
					}
				}
				if(appList == null){
					result.put("status", false);
			    	result.put("title", "更新提示");
			    	result.put("note", "已经是最新的版本了");
					return JsonUtil.ObjToJson(result);
				}else{
					for(Map map: appList){
						if(platform.equals((String)map.get("appType"))){
							//获取最新版本号和文件名
							String lastVersion = (String)map.get("appVersion");
							String lastFileName = (String)map.get("fileName");
							String iosReviewVersion = (String)map.get("iosAuditVersion");
							String iosAuditStatus = (String)map.get("iosAuditStatus");
							//ios在审核期间，去除付费模块,审核通过后，显示付费模块；1、审核通过；2、未通过
							//只针对正在审核的版本加以限制
							if(lastVersion.equals(iosReviewVersion)){
								result.put("iosPassReview", iosAuditStatus);
							}else{
								result.put("iosPassReview", "1");
							}
						    //可用于同步app时间
						    result.put("checkTime", DateTimeUtil.formatDateTime(new Date(), "yyyy-MM-dd HH:mm:ss"));
							
							//判断当前app是否是最新版本，返回下载路径
							if(!StringUtils.isNullOrEmpty(lastVersion) && !StringUtils.isNullOrEmpty(appVersion)){
							    if(ComputePbblt.compareVersion(lastVersion, appVersion) > 0){
							    	String note = (String)map.get("updateLog");
							    	String noteFormat = "<p style='text-align:left;font-size:.8rem'>"+note+"</p>";
							    	result.put("status", true);
							    	result.put("note", "有新版本，是否进行更新？\n"+noteFormat);
							    	result.put("title", "更新提示");
								    //andorid直接提供下载地址
						    		if(platform.equals("android")){
								    	String ip = request.raw().getScheme() + "://"
						    					+ request.raw().getServerName() + ":" + request.raw().getServerPort()
						    					+ request.raw().getContextPath() + "/";
								    	result.put("url", ip+(String)map.get("outsideDownloadAddress"));
						    		}else{//ios提供该应用在appstore上的地址。如：itms-apps://itunes.apple.com/cn/app/...
						    			result.put("url", (String)map.get("outsideDownloadAddress"));
						    		}
							    	return JsonUtil.ObjToJson(result);
							    }
							}
						}
					}
					return JsonUtil.ObjToJson(result);
				}
			}
		});
		Spark.post(new Route("/ppinfoapp/login", true, "jdbcwrite") {
			@Override
			public Object handle(Request request, Response response) throws Exception {
				Map<String,Object> result = new HashMap<String, Object>();
				String account = request.queryParams("account");
				String password = request.queryParams("password");
				if("admin".equals(account) && "123456".equals(password)){
					result.put("status", "1");
					result.put("msg", "登录成功，有效期1天");
					result.put("unitName", "云众知乐");//单位名
					result.put("expiration", 3600*24L);//截止日期
					result.put("token", SimpleTokenUtil.createToken(account, 3600*24L));
				}else{
					result.put("status", "-1");
					result.put("msg", "登录失败，帐号或密码错误");
				}
				
				return JsonUtil.ObjToJson(result);
			}

		});
	}

}
