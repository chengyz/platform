package com.sctgz.HkdApp.manage;

import java.math.BigDecimal;
import java.net.URLEncoder;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import spark.annotation.Auto;

import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.DefaultAlipayClient;
import com.alipay.api.request.AlipayFundTransOrderQueryRequest;
import com.alipay.api.request.AlipayFundTransToaccountTransferRequest;
import com.alipay.api.request.AlipayOpenPublicTemplateMessageIndustryModifyRequest;
import com.alipay.api.request.AlipayTradeQueryRequest;
import com.alipay.api.response.AlipayFundTransOrderQueryResponse;
import com.alipay.api.response.AlipayFundTransToaccountTransferResponse;
import com.alipay.api.response.AlipayOpenPublicTemplateMessageIndustryModifyResponse;
import com.alipay.api.response.AlipayTradeQueryResponse;
import com.alipay.config.AlipayConfig;
import com.alipay.util.AlipayCore;
import com.alipay.util.AlipayNotify;
import com.alipay.util.UtilDate;
import com.sctgz.HkdApp.entity.OrderInfo;
import com.sctgz.HkdApp.entity.VipConsumptionRecord;
import com.sctgz.HkdApp.entity.VipRefMerchantsOrderNum;
import com.sctgz.HkdApp.service.IVipConsumptionRecordService;
import com.sctgz.HkdApp.service.IVipRefMerchantsOrderNumService;
import com.sctgz.HkdApp.service.OrderInfoService;
import com.sctgz.HkdApp.service.impl.OrderInfoServiceImpl;
import com.sctgz.HkdApp.service.impl.VipConsumptionRecordServiceImpl;
import com.sctgz.HkdApp.service.impl.VipRefMerchantsOrderNumServiceImpl;
import com.sctgz.platform.entity.VipInfo;
import com.sctgz.platform.service.IVipService;
import com.sctgz.platform.service.impl.VipServiceImpl;
import com.sctgz.util.DateTimeUtil;
import com.sctgz.util.DateUtil;
import com.sctgz.util.JsonUtil;
import com.sctgz.util.UpdateDataUtil;

/**
 * 会员支付宝支付管理
 * @author chengyz
 *
 */
public class AlipayMng {
	
	@Auto(name = VipConsumptionRecordServiceImpl.class)
	private IVipConsumptionRecordService vipConsumptionRecordService;
	
	@Auto(name = VipServiceImpl.class)
	private IVipService vipService;
	
	@Auto(name = VipRefMerchantsOrderNumServiceImpl.class)
	private IVipRefMerchantsOrderNumService vipRefMerchantsOrderNumService;
	
	@Auto(name = OrderInfoServiceImpl.class)
	private OrderInfoService orderInfoService;
	
	@Auto(name= LocationMng.class)
	private LocationMng locationMng;
	
	@Auto(name=MessageMng.class)
	private MessageMng msgMng;
	/**
	 * 会员移动端支付宝支付
	 * @param sourceId
	 * @param closeConn
	 * @param vipinfo
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public String alipayapiActionM(String sourceId, boolean closeConn,VipInfo vipinfo,HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map result = new HashMap();
		//商户订单号，商户网站订单系统中唯一订单号，必填，系统自动生成
		String out_trade_no = UtilDate.getOrderNum();
		String vipUUID = request.getParameter("vipUUID");
		//后台自定义的订单UUID
	  	String orderUUID = request.getParameter("orderUUID");
	  	OrderInfo order = (OrderInfo)orderInfoService.findOrder(sourceId, closeConn, orderUUID);
	  	//若当前时间减去订单的支付截止时间大于零，则订单支付已经超时
	  	Date cutOffTime = DateTimeUtil.getDateTime(order.getCutOffTime());
	  	if(DateTimeUtil.getTimeInterval(new Date().getTime(), cutOffTime.getTime()) < 0){
	  		Map<String,String> map = new HashMap<String,String>();
	  		map.put("status", "-3");
	  		map.put("msg", "支付已经超时");
	  		return JsonUtil.ObjToJson(map);
	  	}
	  	if(order != null){
	  		order.setOutsideOrderNo(out_trade_no);
	  		orderInfoService.saveOrUpOrder(sourceId, closeConn, order);
	  	}
		VipRefMerchantsOrderNum t = vipRefMerchantsOrderNumService.findByMerchantsOrderNum(sourceId, closeConn, out_trade_no);
		if(t == null) {
			t = new VipRefMerchantsOrderNum();
			t.setVipUUID(vipUUID);
			t.setMerchantsOrderNo(out_trade_no);
			vipRefMerchantsOrderNumService.saveOrUpdate(sourceId, closeConn, t);
		}
		//付款金额，必填
		String total_fee = request.getParameter("total");
		//订单名称，必填
		String subject = request.getParameter("subject");
		//商品描述，可空
		String body = request.getParameter("body");
		String orderInfo = AlipayCore.getOrderInfo(subject,
				body, out_trade_no, total_fee);
		String sign = AlipayCore.sign(orderInfo, AlipayConfig.private_key);
		System.out.println(sign);
		// 仅需对sign 做URL编码
		sign = URLEncoder.encode(sign, "UTF-8");

		String linkString = orderInfo + "&sign=\"" + sign + "\"&"
				+ AlipayCore.getSignType();

	    result.put("status", "1");
	    result.put("msg", "订单获取成功");
	    result.put("order", linkString);
	    return JsonUtil.ObjToJson(result);
	}
	
	/**
	 * 支付宝POST请求反馈信息地址（回调）
	 * front/ali/notifyURL", true, "jdbcwrite"
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public String notifyURL(String sourceId, boolean closeConn,HttpServletRequest request, HttpServletResponse response) throws Exception {
		//获取支付宝POST过来反馈信息
		Map<String,String> params = new HashMap<String,String>();
		Map requestParams = request.getParameterMap();
		for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {
			String name = (String) iter.next();
			String[] values = (String[]) requestParams.get(name);
			String valueStr = "";
			for (int i = 0; i < values.length; i++) {
				valueStr = (i == values.length - 1) ? valueStr + values[i]
						: valueStr + values[i] + ",";
			}
			//乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化
			//valueStr = new String(valueStr.getBytes("ISO-8859-1"), "UTF-8");
			params.put(name, valueStr);
		}
		
		//获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以下仅供参考)//
		//商户订单号
		String out_trade_no = request.getParameter("out_trade_no");
		//支付宝交易号
		String trade_no = request.getParameter("trade_no");
		//交易状态
		String trade_status = request.getParameter("trade_status");
		
		//商品名称
		String subject = request.getParameter("subject");
		
		//消费金额
		String total_fee = request.getParameter("total_fee");
		
		//交易时间
		String notify_time = request.getParameter("notify_time");
		
		//商品描述
		String body = request.getParameter("body");
		
		//买方在支付宝中的ID
		String buyer_id = request.getParameter("buyer_id");

		//获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)//

//		if(AlipayNotify.verify(params)){//验证成功
			//////////////////////////////////////////////////////////////////////////////////////////
			//请在这里加上商户的业务逻辑程序代码

			//——请根据您的业务逻辑来编写程序（以下代码仅作参考）——
			
			if(trade_status.equals("TRADE_FINISHED") || trade_status.equals("TRADE_SUCCESS")){
				VipRefMerchantsOrderNum urm = vipRefMerchantsOrderNumService.findByMerchantsOrderNum(sourceId, closeConn, out_trade_no);
				if(urm != null) {
						VipInfo vipinfo = vipService.findVipInfoByUUID(sourceId, closeConn, urm.getVipUUID());
						OrderInfo orderInfo = orderInfoService.findByOutOrderNo(sourceId, closeConn, urm.getMerchantsOrderNo());
//						orderInfo.setStatus("3");//付款成功待接单
//						orderInfo.setPayMode("支付宝");
//						orderInfo.setPayTime(DateUtil.formatDate(new Date(),"yyyy-MM-dd HH:mm:ss"));
//						orderInfo.setOutsidePayNo(trade_no);
//						orderInfoService.saveOrUpOrder(sourceId, closeConn, orderInfo);
						Map<String, Object> dataMap = new HashMap<String, Object>();
						dataMap.put("status", "3");
						dataMap.put("payMode", "支付宝");
						dataMap.put("payTime", DateUtil.formatDate(new Date(),"yyyy-MM-dd HH:mm:ss"));
						dataMap.put("outsidePayNo", trade_no);
						//直接更新对应的参数即可，不用全部更新
						UpdateDataUtil.updateData(sourceId, "order_info", dataMap, "outsideOrderNo", urm.getMerchantsOrderNo());
						//添加订单坐标缓存
						locationMng.addUntreatedOrderCache(sourceId, closeConn, orderInfo);
						//添加订单消息缓存
						//msgMap  msgUUID,msgStatus(消息状态:0待处理，1已处理),msgType(消息类型：1一般消息，2广播消息，3点对点消息)，msgModule(消息模块：01发布订单消息,02抢单消息)
						//msgContent(消息内容),msgSendUUID(消息发送方uuid),msgRecUUID(消息接收方uuid),msgOrderUUID（订单号）
						Map msgMap = new HashMap();
						msgMap.put("msgUUID", UUID.randomUUID().toString());//uuid
						msgMap.put("msgStatus", "0");
						msgMap.put("msgType", "2");
						msgMap.put("msgModule", "01");
						msgMap.put("msgContent", "你已成功派单");
						msgMap.put("msgSendUUID", orderInfo.getVipUUID());
						msgMap.put("msgOrderUUID", orderInfo.getOrderUUID());
						msgMap.put("msgTime", DateUtil.formatDateTime(new Date()));
						msgMng.addMessage(sourceId, closeConn, msgMap);
						
					vipRefMerchantsOrderNumService.delete(sourceId, closeConn,vipinfo.getVipUUID(), urm.getMerchantsOrderNo());
					VipConsumptionRecord c = vipConsumptionRecordService.findVipConsumptionRecord(sourceId, closeConn, trade_no);
					if(c == null){ 
						c = new VipConsumptionRecord();
						c.setModuleName("");
						c.setModuleUUID("");
						BigDecimal consumMoney = new BigDecimal(total_fee);
						consumMoney.setScale(2);
						c.setConsumptionMoney(consumMoney);
						String moduleName = "";
						String detail = "";
						String time = DateUtil.formatDate(new Date(),"yyyy-MM-dd HH:mm:ss");
						if("1".equals(orderInfo.getOrderType())) {
							moduleName = "帮我买";
							detail = "在[ "+moduleName+"] 下单  ";
							if(orderInfo.getBuyOption() != null && !"".equals(orderInfo.getBuyOption())) {
								detail += orderInfo.getBuyOption();
							}
						}
						if("2".equals(orderInfo.getOrderType())) {
							moduleName = "帮我送";
							detail = "在[ "+moduleName+"] 下单  ";
							if(orderInfo.getItemType() != null && !"".equals(orderInfo.getItemType())) {
								detail += orderInfo.getItemType();
							}
						}
						if("3".equals(orderInfo.getOrderType())) {
							moduleName = "帮我取";
							detail = "在[ "+moduleName+"] 下单  ";
							if(orderInfo.getItemType() != null && !"".equals(orderInfo.getItemType())) {
								detail += orderInfo.getItemType();
							}
						}
						c.setModuleName(moduleName);
						c.setConsumptionDetails(detail);
						c.setTradeNo(trade_no);
						c.setConsumptionTime(time);
						c.setVipMobilePhone(vipinfo.getVipMobile());
						c.setVipUUID(vipinfo.getVipUUID());
						c.setVipName(vipinfo.getVipName());
						c.setUUID(UUID.randomUUID().toString());
						vipConsumptionRecordService.saveOrUpdate(sourceId, closeConn, c);
					}
				}
				//判断该笔订单是否在商户网站中已经做过处理
				//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
				//请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的
				//如果有做过处理，不执行商户的业务程序
				//注意：
				//退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知
			} else if (trade_status.equals("TRADE_SUCCESS")){
				//判断该笔订单是否在商户网站中已经做过处理
					//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
					//请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的
					//如果有做过处理，不执行商户的业务程序
					
				//注意：
				//付款完成后，支付宝系统发送该交易状态通知
			}

			//——请根据您的业务逻辑来编写程序（以上代码仅作参考）——
				
			return "success";	//请不要修改或删除

			//////////////////////////////////////////////////////////////////////////////////////////
//		} else{//验证失败
//			return "fail";
//		}
	}
	
	/**
	 * 支付宝get请求反馈信息地址
	 * front/pay/returnURL", true, "jdbcwrite"
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public boolean returnURL(String sourceId, boolean closeConn,HttpServletRequest request, HttpServletResponse response) throws Exception {
		//获取支付宝GET过来反馈信息
		Map<String,String> params = new HashMap<String,String>();
		Map requestParams = request.getParameterMap();
		for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {
			String name = (String) iter.next();
			String[] values = (String[]) requestParams.get(name);
			String valueStr = "";
			for (int i = 0; i < values.length; i++) {
				valueStr = (i == values.length - 1) ? valueStr + values[i]
						: valueStr + values[i] + ",";
			}
			//乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化
			//valueStr = new String(valueStr.getBytes("ISO-8859-1"), "UTF-8");
			params.put(name, valueStr);
		}
		
		//获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以下仅供参考)//
		//商户订单号

		String out_trade_no = request.getParameter("out_trade_no");

		//支付宝交易号

		String trade_no = request.getParameter("trade_no");

		//交易状态
		String trade_status = request.getParameter("trade_status");
		
		//商品名称
		String subject = request.getParameter("subject");
		
		//充值金额
		String total_fee = request.getParameter("total_fee");
		
		//交易时间
		String notify_time = request.getParameter("notify_time");
		
		//商品描述
		String body = request.getParameter("body");
		
		//买方在支付宝中的ID
		String buyer_id = request.getParameter("buyer_id");

		//获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)//
		
		//计算得出通知验证结果
		boolean verify_result = AlipayNotify.verify(params);
		
//		if(verify_result){//验证成功
			//////////////////////////////////////////////////////////////////////////////////////////
			//请在这里加上商户的业务逻辑程序代码
			//——请根据您的业务逻辑来编写程序（以下代码仅作参考）——
			if(trade_status.equals("TRADE_FINISHED") || trade_status.equals("TRADE_SUCCESS")){
				//判断该笔订单是否在商户网站中已经做过处理
				//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
				//如果有做过处理，不执行商户的业务程序
				//商户订单号查会员uuid
				VipRefMerchantsOrderNum urm= vipRefMerchantsOrderNumService.findByMerchantsOrderNum(sourceId, closeConn, out_trade_no);
				if(urm==null){
					return false;//无订单信息
				}
				//会员uuid查会员信息
				VipInfo vipinfo = vipService.findVipInfoByUUID(sourceId, closeConn, urm.getVipUUID());		
				if(vipinfo==null){
					return false;//无会员信息
				}
			}
			//response.redirect(request.raw().getContextPath() + "/front/a.jsp");
			return true;
			//该页面可做页面美工编辑
			//——请根据您的业务逻辑来编写程序（以上代码仅作参考）——

			//////////////////////////////////////////////////////////////////////////////////////////
//		}else{
//			//该页面可做页面美工编辑
//			//response.redirect(request.raw().getContextPath() + "/front/a.jsp");
//			return false;
//		}
	}
	public String getTradeStatus () {
		
//		AlipayClient alipayClient = new DefaultAlipayClient("https://openapi.alipay.com/gateway.do",
//				"2016051101388103",AlipayConfig.private_key,"json","utf-8",AlipayConfig.alipay_public_key,"RSA");
//		AlipayTradeQueryRequest request = new AlipayTradeQueryRequest();
//		request.setBizContent("{" +"\"out_trade_no\":\"20170720102513\"," 
//		+"\"trade_no\":\"2017072021001004200233766477\"" +"  }");
//		AlipayTradeQueryResponse response = null;
//		try {
//			response = alipayClient.execute(request);
//			if(response.isSuccess()){
//				System.out.println("调用成功");
//				} else {
//				System.out.println("调用失败");
//				}
//		} catch (AlipayApiException e) {
//			e.printStackTrace();
//		}
//		
//		
//		
		AlipayClient alipayClient = new DefaultAlipayClient("https://openapi.alipay.com/gateway.do",
				"2016051101388103",AlipayConfig.private_transfer_key,"json","utf-8",AlipayConfig.alipay_public_transfer_key,"RSA");
		AlipayFundTransOrderQueryRequest request = new AlipayFundTransOrderQueryRequest();
		request.setBizContent("{" +
		"\"out_biz_no\":\"3142321423432\"," +
		"\"order_id\":\"20170801110070001502560008702994\"" +
		"  }");
		AlipayFundTransOrderQueryResponse response;
		try {
			response = alipayClient.execute(request);
			if(response.isSuccess()){
				System.out.println("调用成功");
				} else {
				System.out.println("调用失败");
				}
		} catch (AlipayApiException e) {
			e.printStackTrace();
		}
		
		return "213";
	}
	
}
