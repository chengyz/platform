package com.sctgz.HkdApp.manage;

import java.io.StringReader;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

import spark.annotation.Auto;

import com.sctgz.HkdApp.entity.OrderInfo;
import com.sctgz.HkdApp.entity.VipConsumptionRecord;
import com.sctgz.HkdApp.entity.VipRefMerchantsOrderNum;
import com.sctgz.HkdApp.service.IVipConsumptionRecordService;
import com.sctgz.HkdApp.service.IVipRefMerchantsOrderNumService;
import com.sctgz.HkdApp.service.OrderInfoService;
import com.sctgz.HkdApp.service.impl.OrderInfoServiceImpl;
import com.sctgz.HkdApp.service.impl.VipConsumptionRecordServiceImpl;
import com.sctgz.HkdApp.service.impl.VipRefMerchantsOrderNumServiceImpl;
import com.sctgz.platform.entity.VipInfo;
import com.sctgz.platform.service.IVipService;
import com.sctgz.platform.service.impl.VipServiceImpl;
import com.sctgz.util.DateTimeUtil;
import com.sctgz.util.DateUtil;
import com.sctgz.util.IpUtil;
import com.sctgz.util.JsonUtil;
import com.sctgz.util.ReadProperties;
import com.sctgz.util.UpdateDataUtil;
import com.tenpay.util.ConstantUtil;
import com.weixinpay.GetWxOrderno;
import com.weixinpay.MD5Util;
import com.weixinpay.RequestHandler;
import com.weixinpay.WeixinPayUtils;
import com.weixinpay.WeixinpayUtil;
import com.weixinpay.entry.WxPayResult;

/**
 * 第三方微信支付管理
 * @author hshzh
 *
 */
public class WeixinNotifyMng{
	
	@Auto(name = VipRefMerchantsOrderNumServiceImpl.class)
	private IVipRefMerchantsOrderNumService vipRefMerchantsOrderNumService;
	
	@Auto(name = VipServiceImpl.class)
	private IVipService vipService;
	
	@Auto(name = VipConsumptionRecordServiceImpl.class)
	private IVipConsumptionRecordService vipConsumptionRecordService;
	
	@Auto(name = OrderInfoServiceImpl.class)
	private OrderInfoService orderInfoService;
	
	
	@Auto(name= LocationMng.class)
	private LocationMng locationMng;
	
	@Auto(name=MessageMng.class)
	private MessageMng msgMng;
	
	
	/**
	 * 微信支付发起
	 * @param sourceId
	 * @param closeConn
	 * @param vipinfo
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public String weixinAppPay(String sourceId, boolean closeConn,VipInfo vipinfo, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map result = new HashMap();
		if(vipinfo == null) {
			result.put("status", "-100");
			result.put("msg", "会员未登录!");
			return JsonUtil.ObjToJson(result);
		}
		String vipUUID = request.getParameter("vipUUID");
	    //后台自定义的订单UUID
	  	String orderUUID = request.getParameter("orderUUID");
	  	OrderInfo orderInfo = (OrderInfo)orderInfoService.findOrder(sourceId, closeConn, orderUUID);
	  	//若当前时间减去订单的支付截止时间大于零，则订单支付已经超时
	  	Date createTime = DateTimeUtil.getDateTime(orderInfo.getCutOffTime());
	  	if(DateTimeUtil.getTimeInterval(new Date().getTime(), createTime.getTime()) > 0){
	  		result.put("status", "-3");
	  		result.put("msg", "支付已经超时");
	  		return JsonUtil.ObjToJson(result);
	  	}
	  	//调用微信支付工具类
	  	result = WeixinPayUtils.weixinAppPay(sourceId, closeConn, request, response);
	  	if(orderInfo != null){
	  			orderInfo.setOutsideOrderNo((String)result.get("out_trade_no"));
	  			orderInfoService.saveOrUpOrder(sourceId, closeConn, orderInfo);
	  	}
	  	//生成订单中间表记录
	  	if("SUCCESS".equals((String)result.get("return_code"))){
	  		VipRefMerchantsOrderNum t = vipRefMerchantsOrderNumService.findByMerchantsOrderNum(sourceId, closeConn, (String)result.get("out_trade_no"));
			if(t == null) {
				t = new VipRefMerchantsOrderNum();
				t.setVipUUID(vipUUID);
				t.setMerchantsOrderNo((String)result.get("out_trade_no"));
				vipRefMerchantsOrderNumService.saveOrUpdate(sourceId,closeConn,t);
			}
	  	}
		return JsonUtil.ObjToJson(result);
	}
	
	/**
	 * 微信支付回调
	 * front/weixinNotify/notify",true,"jdbcwrite"
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public byte[] notify(String sourceId, boolean closeConn,HttpServletRequest request, HttpServletResponse response) throws Exception {
		//调用微信支付回调工具类获取返回的参数
		WxPayResult wpr = WeixinPayUtils.weixinNotify(sourceId, closeConn, request, response);
		String resXml = "";
		if("SUCCESS".equals(wpr.getResultCode())){
				VipRefMerchantsOrderNum urm = vipRefMerchantsOrderNumService.findByMerchantsOrderNum(sourceId, closeConn,wpr.getOutTradeNo());
				if(urm != null) {
					VipInfo vipinfo = vipService.findVipInfoByUUID(sourceId, closeConn,urm.getVipUUID());
					OrderInfo orderInfo = orderInfoService.findByOutOrderNo(sourceId, closeConn, urm.getMerchantsOrderNo());
					
					Map<String, Object> dataMap = new HashMap<String, Object>();
					dataMap.put("status", "3");
					dataMap.put("payMode", "微信");
					dataMap.put("payTime", DateUtil.formatDate(new Date(),"yyyy-MM-dd HH:mm:ss"));
					dataMap.put("outsidePayNo", wpr.getTransactionId());
					//直接更新对应的参数即可，不用全部更新
					UpdateDataUtil.updateData(sourceId, "order_info", dataMap, "outsideOrderNo", urm.getMerchantsOrderNo());
					
					//添加订单坐标缓存
					locationMng.addUntreatedOrderCache(sourceId, closeConn, orderInfo);
					//添加订单消息缓存
					//msgMap  msgUUID,msgStatus(消息状态:0待处理，1已处理),msgType(消息类型：1一般消息，2广播消息，3点对点消息)，msgModule(消息模块：01发布订单消息,02抢单消息)
					//msgContent(消息内容),msgSendUUID(消息发送方uuid),msgRecUUID(消息接收方uuid) msgOrderUUID（订单号）
					Map msgMap = new HashMap();
					msgMap.put("msgUUID", UUID.randomUUID().toString());//uuid
					msgMap.put("msgStatus", "0");
					msgMap.put("msgType", "2");
					msgMap.put("msgModule", "01");
					msgMap.put("msgContent", "有一个待抢订单发出");
					msgMap.put("msgSendUUID", orderInfo.getVipUUID());
					msgMap.put("msgOrderUUID", orderInfo.getOrderUUID());
					msgMap.put("msgTime", DateUtil.formatDateTime(new Date()));
					msgMng.addMessage(sourceId, closeConn, msgMap);
					
					vipRefMerchantsOrderNumService.delete(sourceId, closeConn,vipinfo.getVipUUID(), wpr.getOutTradeNo());
					VipConsumptionRecord c = vipConsumptionRecordService.findVipConsumptionRecord(sourceId, closeConn, wpr.getTransactionId());
					if(c == null){ 
						c = new VipConsumptionRecord();
						BigDecimal consumMoney = new BigDecimal(wpr.getTotalFee());
						consumMoney.setScale(2);
						c.setConsumptionMoney(consumMoney);
						String moduleName = "";
						String detail = "";
						String time = DateUtil.formatDate(new Date(),"yyyy-MM-dd HH:mm:ss");
						if("1".equals(orderInfo.getOrderType())) {
							moduleName = "帮我买";
							detail = "在[ "+moduleName+"] 下单  ";
							if(orderInfo.getBuyOption() != null && !"".equals(orderInfo.getBuyOption())) {
								detail += orderInfo.getBuyOption();
							}
						}
						if("2".equals(orderInfo.getOrderType())) {
							moduleName = "帮我送";
							detail = "在[ "+moduleName+"] 下单  ";
							if(orderInfo.getItemType() != null && !"".equals(orderInfo.getItemType())) {
								detail += orderInfo.getItemType();
							}
						}
						if("3".equals(orderInfo.getOrderType())) {
							moduleName = "帮我取";
							detail = "在 ["+moduleName+"] 下单  ";
							if(orderInfo.getItemType() != null && !"".equals(orderInfo.getItemType())) {
								detail += orderInfo.getItemType();
							}
						}
						c.setModuleName(moduleName);
						c.setConsumptionDetails(detail);
						c.setTradeNo(wpr.getTransactionId());
						c.setConsumptionTime(time);
						c.setVipMobilePhone(vipinfo.getVipMobile());
						c.setVipUUID(vipinfo.getVipUUID());
						c.setVipName(vipinfo.getVipName());
						c.setUUID(UUID.randomUUID().toString());
						vipConsumptionRecordService.saveOrUpdate(sourceId, closeConn, c);
					}
				}
				
			//支付成功
			resXml = "<xml>" + "<return_code><![CDATA[SUCCESS]]></return_code>"
			+ "<return_msg><![CDATA[OK]]></return_msg>" + "</xml> ";
		}else{
			resXml = "<xml>" + "<return_code><![CDATA[FAIL]]></return_code>"
			+ "<return_msg><![CDATA[报文为空]]></return_msg>" + "</xml> ";
		}
		return resXml.getBytes();
	}
	/**
	 * description: 解析微信通知xml
	 * 
	 * @param xml
	 * @return
	 * @author ex_yangxiaoyi
	 * @see
	 */
	@SuppressWarnings({ "unused", "rawtypes", "unchecked" })
	private static Map parseXmlToList2(String xml) {
		Map retMap = new HashMap();
		try {
			StringReader read = new StringReader(xml);
			// 创建新的输入源SAX 解析器将使用 InputSource 对象来确定如何读取 XML 输入
			InputSource source = new InputSource(read);
			// 创建一个新的SAXBuilder
			SAXBuilder sb = new SAXBuilder();
			// 通过输入源构造一个Document
			Document doc = (Document) sb.build(source);
			Element root = doc.getRootElement();// 指向根节点
			List<Element> es = root.getChildren();
			if (es != null && es.size() != 0) {
				for (Element element : es) {
					retMap.put(element.getName(), element.getValue());
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return retMap;
	}
}
